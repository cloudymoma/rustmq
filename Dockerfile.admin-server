# Multi-stage build for RustMQ Admin Server
# Build stage
FROM rust:1.82-slim-bookworm AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /usr/src/rustmq

# Copy dependency files first for better layer caching
COPY Cargo.toml Cargo.lock ./

# Create a dummy src/main.rs to build dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Build dependencies (this layer will be cached unless Cargo.toml changes)
RUN cargo build --release --bin rustmq-admin-server
RUN rm src/main.rs

# Copy the actual source code
COPY src/ ./src/
COPY .cargo/ ./.cargo/

# Build the admin server binary with optimizations
RUN cargo build --release --bin rustmq-admin-server

# Verify the binary was built
RUN ls -la target/release/ && \
    file target/release/rustmq-admin-server && \
    ldd target/release/rustmq-admin-server

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Create rustmq user and group
RUN groupadd -r rustmq && useradd -r -g rustmq rustmq

# Create necessary directories
RUN mkdir -p /etc/rustmq \
    /var/log/rustmq

# Set ownership
RUN chown -R rustmq:rustmq /var/log/rustmq

# Copy the binary from builder stage
COPY --from=builder /usr/src/rustmq/target/release/rustmq-admin-server /usr/local/bin/rustmq-admin-server

# Make binary executable
RUN chmod +x /usr/local/bin/rustmq-admin-server

# Create admin server configuration
RUN cat > /etc/rustmq/admin-server.toml << 'EOF'
[admin]
controller_endpoints = ["${CONTROLLER_ENDPOINTS:-controller-1:9094}"]
timeout_ms = 30000
retry_attempts = 3

[server]
listen_addr = "${ADMIN_LISTEN_ADDR:-0.0.0.0:8080}"
max_connections = 1000
request_timeout_ms = 30000

[cors]
allowed_origins = ["*"]
allowed_methods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
allowed_headers = ["*"]

[logging]
level = "${RUSTMQ_LOG_LEVEL:-info}"
format = "json"
output = "stdout"

[auth]
# Authentication configuration (if enabled)
# enable_auth = false
# username = ""
# password = ""
# token = ""
EOF

# Create entrypoint script
RUN cat > /usr/local/bin/entrypoint.sh << 'EOF'
#!/bin/bash
set -e

# Function to substitute environment variables in config file
substitute_env_vars() {
    local file=$1
    # Use envsubst to replace environment variables in the config file
    envsubst < "$file" > "$file.tmp" && mv "$file.tmp" "$file"
}

# Substitute environment variables in configuration
if [[ -f /etc/rustmq/admin-server.toml ]]; then
    substitute_env_vars /etc/rustmq/admin-server.toml
fi

# Wait for controller to be available
if [[ "${WAIT_FOR_CONTROLLER:-true}" == "true" ]]; then
    echo "Waiting for controller to be available..."
    IFS=',' read -ra CONTROLLERS <<< "${CONTROLLER_ENDPOINTS:-controller-1:9094}"
    for controller in "${CONTROLLERS[@]}"; do
        host_port=(${controller//:/ })
        host=${host_port[0]}
        port=${host_port[1]:-9094}
        until curl -f "http://$host:9642/health" > /dev/null 2>&1; do
            echo "Waiting for controller $controller..."
            sleep 2
        done
    done
    echo "Controller is available"
fi

echo "Starting Admin Server on ${ADMIN_LISTEN_ADDR:-0.0.0.0:8080}"

# Switch to rustmq user and execute the admin server
exec gosu rustmq "$@"
EOF

# Install gosu for proper user switching
RUN curl -o /usr/local/bin/gosu -SL "https://github.com/tianon/gosu/releases/download/1.14/gosu-$(dpkg --print-architecture)" \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true

# Install envsubst for config template processing
RUN apt-get update && apt-get install -y gettext-base && rm -rf /var/lib/apt/lists/*

# Make entrypoint executable
RUN chmod +x /usr/local/bin/entrypoint.sh

# Expose admin API port
EXPOSE 8080

# Set working directory
WORKDIR /var/lib/rustmq

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Use entrypoint script
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Default command
CMD ["rustmq-admin-server", "--config", "/etc/rustmq/admin-server.toml"]

# Metadata labels
LABEL maintainer="RustMQ Team <team@rustmq.dev>"
LABEL version="0.1.0"
LABEL description="RustMQ Admin Server - REST API server for RustMQ cluster administration"
LABEL org.opencontainers.image.source="https://github.com/rustmq/rustmq"
LABEL org.opencontainers.image.documentation="https://docs.rustmq.dev"
LABEL org.opencontainers.image.vendor="RustMQ"
LABEL org.opencontainers.image.title="RustMQ Admin Server"