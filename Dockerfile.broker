# Multi-stage build for RustMQ Broker
# Build stage
FROM rust:1.82-slim-bookworm AS builder

# Install build dependencies including WASM target
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Add WASM target for ETL module support
RUN rustup target add wasm32-unknown-unknown

# Install wasm-opt for WASM optimization
RUN curl -L https://github.com/WebAssembly/binaryen/releases/download/version_116/binaryen-version_116-x86_64-linux.tar.gz | \
    tar -xz -C /tmp && \
    mv /tmp/binaryen-version_116/bin/wasm-opt /usr/local/bin/ && \
    chmod +x /usr/local/bin/wasm-opt && \
    rm -rf /tmp/binaryen-version_116

# Set working directory
WORKDIR /usr/src/rustmq

# Copy dependency files first for better layer caching
COPY Cargo.toml Cargo.lock ./

# Create a dummy src/main.rs to build dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Build dependencies (this layer will be cached unless Cargo.toml changes)
RUN cargo build --release --bin rustmq-broker
RUN rm src/main.rs

# Copy the actual source code
COPY src/ ./src/
COPY .cargo/ ./.cargo/

# Build the broker binary with optimizations
RUN cargo build --release --bin rustmq-broker

# Verify the binary was built
RUN ls -la target/release/ && \
    file target/release/rustmq-broker && \
    ldd target/release/rustmq-broker

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Create rustmq user and group
RUN groupadd -r rustmq && useradd -r -g rustmq rustmq

# Create necessary directories
RUN mkdir -p /var/lib/rustmq/wal \
    /var/lib/rustmq/data \
    /var/lib/rustmq/wasm-modules \
    /etc/rustmq \
    /var/log/rustmq

# Set ownership
RUN chown -R rustmq:rustmq /var/lib/rustmq /var/log/rustmq

# Copy the binary from builder stage
COPY --from=builder /usr/src/rustmq/target/release/rustmq-broker /usr/local/bin/rustmq-broker

# Make binary executable
RUN chmod +x /usr/local/bin/rustmq-broker

# Copy configuration template (if it exists)
COPY config/broker.toml /etc/rustmq/broker.toml.template

# Create default configuration
RUN echo '[broker]' > /etc/rustmq/broker.toml && \
    echo 'id = "${BROKER_ID:-broker-001}"' >> /etc/rustmq/broker.toml && \
    echo 'rack_id = "${RACK_ID:-us-central1-a}"' >> /etc/rustmq/broker.toml && \
    echo '' >> /etc/rustmq/broker.toml && \
    echo '[network]' >> /etc/rustmq/broker.toml && \
    echo 'quic_listen = "${QUIC_LISTEN:-0.0.0.0:9092}"' >> /etc/rustmq/broker.toml && \
    echo 'rpc_listen = "${RPC_LISTEN:-0.0.0.0:9093}"' >> /etc/rustmq/broker.toml && \
    echo 'max_connections = 10000' >> /etc/rustmq/broker.toml && \
    echo 'connection_timeout_ms = 30000' >> /etc/rustmq/broker.toml && \
    echo '' >> /etc/rustmq/broker.toml && \
    echo '[wal]' >> /etc/rustmq/broker.toml && \
    echo 'path = "${WAL_PATH:-/var/lib/rustmq/wal}"' >> /etc/rustmq/broker.toml && \
    echo 'capacity_bytes = 10737418240' >> /etc/rustmq/broker.toml && \
    echo 'fsync_on_write = true' >> /etc/rustmq/broker.toml && \
    echo 'segment_size_bytes = 134217728' >> /etc/rustmq/broker.toml && \
    echo 'buffer_size = 65536' >> /etc/rustmq/broker.toml && \
    echo 'upload_interval_ms = 300000' >> /etc/rustmq/broker.toml && \
    echo 'flush_interval_ms = 1000' >> /etc/rustmq/broker.toml && \
    echo '' >> /etc/rustmq/broker.toml && \
    echo '[cache]' >> /etc/rustmq/broker.toml && \
    echo 'write_cache_size_bytes = 1073741824' >> /etc/rustmq/broker.toml && \
    echo 'read_cache_size_bytes = 2147483648' >> /etc/rustmq/broker.toml && \
    echo 'eviction_policy = "Lru"' >> /etc/rustmq/broker.toml && \
    echo '' >> /etc/rustmq/broker.toml && \
    echo '[object_storage]' >> /etc/rustmq/broker.toml && \
    echo 'storage_type = "${OBJECT_STORAGE_TYPE:-S3}"' >> /etc/rustmq/broker.toml && \
    echo 'bucket = "${OBJECT_STORAGE_BUCKET:-rustmq-data}"' >> /etc/rustmq/broker.toml && \
    echo 'region = "${OBJECT_STORAGE_REGION:-us-central1}"' >> /etc/rustmq/broker.toml && \
    echo 'endpoint = "${OBJECT_STORAGE_ENDPOINT:-https://storage.googleapis.com}"' >> /etc/rustmq/broker.toml && \
    echo 'access_key = "${OBJECT_STORAGE_ACCESS_KEY:-}"' >> /etc/rustmq/broker.toml && \
    echo 'secret_key = "${OBJECT_STORAGE_SECRET_KEY:-}"' >> /etc/rustmq/broker.toml && \
    echo 'multipart_threshold = 104857600' >> /etc/rustmq/broker.toml && \
    echo 'max_concurrent_uploads = 10' >> /etc/rustmq/broker.toml && \
    echo '' >> /etc/rustmq/broker.toml && \
    echo '[controller]' >> /etc/rustmq/broker.toml && \
    echo 'endpoints = ["${CONTROLLER_ENDPOINTS:-controller-1:9094}"]' >> /etc/rustmq/broker.toml && \
    echo 'election_timeout_ms = 5000' >> /etc/rustmq/broker.toml && \
    echo 'heartbeat_interval_ms = 1000' >> /etc/rustmq/broker.toml && \
    echo '' >> /etc/rustmq/broker.toml && \
    echo '[replication]' >> /etc/rustmq/broker.toml && \
    echo 'min_in_sync_replicas = 2' >> /etc/rustmq/broker.toml && \
    echo 'ack_timeout_ms = 5000' >> /etc/rustmq/broker.toml && \
    echo 'max_replication_lag = 1000' >> /etc/rustmq/broker.toml && \
    echo '' >> /etc/rustmq/broker.toml && \
    echo '[etl]' >> /etc/rustmq/broker.toml && \
    echo 'enabled = true' >> /etc/rustmq/broker.toml && \
    echo 'memory_limit_bytes = 67108864' >> /etc/rustmq/broker.toml && \
    echo 'execution_timeout_ms = 5000' >> /etc/rustmq/broker.toml && \
    echo 'max_concurrent_executions = 100' >> /etc/rustmq/broker.toml && \
    echo '' >> /etc/rustmq/broker.toml && \
    echo '[scaling]' >> /etc/rustmq/broker.toml && \
    echo 'max_concurrent_additions = 3' >> /etc/rustmq/broker.toml && \
    echo 'max_concurrent_decommissions = 2' >> /etc/rustmq/broker.toml && \
    echo 'rebalance_timeout_ms = 300000' >> /etc/rustmq/broker.toml && \
    echo 'traffic_migration_rate = 0.1' >> /etc/rustmq/broker.toml && \
    echo 'health_check_timeout_ms = 30000' >> /etc/rustmq/broker.toml && \
    echo '' >> /etc/rustmq/broker.toml && \
    echo '[operations]' >> /etc/rustmq/broker.toml && \
    echo 'allow_runtime_config_updates = true' >> /etc/rustmq/broker.toml && \
    echo 'upgrade_velocity = 3' >> /etc/rustmq/broker.toml && \
    echo 'graceful_shutdown_timeout_ms = 30000' >> /etc/rustmq/broker.toml && \
    echo '' >> /etc/rustmq/broker.toml && \
    echo '[operations.kubernetes]' >> /etc/rustmq/broker.toml && \
    echo 'use_stateful_sets = true' >> /etc/rustmq/broker.toml && \
    echo 'pvc_storage_class = "fast-ssd"' >> /etc/rustmq/broker.toml && \
    echo 'wal_volume_size = "100Gi"' >> /etc/rustmq/broker.toml && \
    echo 'enable_pod_affinity = true' >> /etc/rustmq/broker.toml

# Create entrypoint script
RUN cat > /usr/local/bin/entrypoint.sh << 'EOF'
#!/bin/bash
set -e

# Function to substitute environment variables in config file
substitute_env_vars() {
    local file=$1
    # Use envsubst to replace environment variables in the config file
    envsubst < "$file" > "$file.tmp" && mv "$file.tmp" "$file"
}

# Substitute environment variables in configuration
if [[ -f /etc/rustmq/broker.toml ]]; then
    substitute_env_vars /etc/rustmq/broker.toml
fi

# Ensure WAL directory exists and has correct permissions
mkdir -p "${WAL_PATH:-/var/lib/rustmq/wal}"
chown -R rustmq:rustmq "${WAL_PATH:-/var/lib/rustmq/wal}"

# Switch to rustmq user and execute the broker
exec gosu rustmq "$@"
EOF

# Install gosu for proper user switching
RUN curl -o /usr/local/bin/gosu -SL "https://github.com/tianon/gosu/releases/download/1.14/gosu-$(dpkg --print-architecture)" \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true

# Install envsubst for config template processing
RUN apt-get update && apt-get install -y gettext-base && rm -rf /var/lib/apt/lists/*

# Make entrypoint executable
RUN chmod +x /usr/local/bin/entrypoint.sh

# Expose ports (QUIC, RPC, Health, ETL API)
EXPOSE 9092 9093 9642 9096

# Set working directory
WORKDIR /var/lib/rustmq

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:9642/health || exit 1

# Use entrypoint script
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Default command
CMD ["rustmq-broker", "--config", "/etc/rustmq/broker.toml"]

# Metadata labels
LABEL maintainer="RustMQ Team <team@rustmq.dev>"
LABEL version="0.1.0"
LABEL description="RustMQ Broker - Cloud-native distributed message queue broker"
LABEL org.opencontainers.image.source="https://github.com/rustmq/rustmq"
LABEL org.opencontainers.image.documentation="https://docs.rustmq.dev"
LABEL org.opencontainers.image.vendor="RustMQ"
LABEL org.opencontainers.image.title="RustMQ Broker"