// This file is @generated by prost-build.
/// Request vote message for leader election
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestVoteRequest {
    /// Candidate's current term
    #[prost(uint64, tag = "1")]
    pub term: u64,
    /// Candidate node ID
    #[prost(string, tag = "2")]
    pub candidate_id: ::prost::alloc::string::String,
    /// Index of candidate's last log entry
    #[prost(uint64, tag = "3")]
    pub last_log_index: u64,
    /// Term of candidate's last log entry
    #[prost(uint64, tag = "4")]
    pub last_log_term: u64,
    /// Whether this is a pre-vote request
    #[prost(bool, tag = "5")]
    pub pre_vote: bool,
    /// Request metadata
    #[prost(message, optional, tag = "6")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// RustMQ-specific extensions
    ///
    /// Candidate priority for leader preference
    #[prost(uint64, tag = "7")]
    pub candidate_priority: u64,
    /// Candidate software version
    #[prost(string, tag = "8")]
    pub candidate_version: ::prost::alloc::string::String,
    /// Candidate capabilities
    #[prost(string, repeated, tag = "9")]
    pub candidate_capabilities: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Election context information
    ///
    /// Reason for starting election
    #[prost(string, tag = "10")]
    pub election_reason: ::prost::alloc::string::String,
    /// Election timeout used
    #[prost(uint64, tag = "11")]
    pub election_timeout_ms: u64,
}
/// Response to vote request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RequestVoteResponse {
    /// Responder's current term
    #[prost(uint64, tag = "1")]
    pub term: u64,
    /// Whether vote was granted
    #[prost(bool, tag = "2")]
    pub vote_granted: bool,
    /// Voting node ID
    #[prost(string, tag = "3")]
    pub voter_id: ::prost::alloc::string::String,
    /// Response metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Additional context for vote decision
    ///
    /// Reason for vote decision
    #[prost(string, tag = "5")]
    pub vote_reason: ::prost::alloc::string::String,
    /// Voter's last log index
    #[prost(uint64, tag = "6")]
    pub voter_last_log_index: u64,
    /// Voter's last log term
    #[prost(uint64, tag = "7")]
    pub voter_last_log_term: u64,
    /// Voter capabilities and preferences
    ///
    /// Voter software version
    #[prost(string, tag = "8")]
    pub voter_version: ::prost::alloc::string::String,
    /// Voter capabilities
    #[prost(string, repeated, tag = "9")]
    pub voter_capabilities: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Performance and health information
    ///
    /// Voter CPU usage
    #[prost(double, tag = "10")]
    pub voter_cpu_usage: f64,
    /// Voter memory usage
    #[prost(double, tag = "11")]
    pub voter_memory_usage: f64,
}
/// Append entries request for log replication
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendEntriesRequest {
    /// Leader's current term
    #[prost(uint64, tag = "1")]
    pub term: u64,
    /// Leader node ID
    #[prost(string, tag = "2")]
    pub leader_id: ::prost::alloc::string::String,
    /// Index of log entry immediately preceding new ones
    #[prost(uint64, tag = "3")]
    pub prev_log_index: u64,
    /// Term of prev_log_index entry
    #[prost(uint64, tag = "4")]
    pub prev_log_term: u64,
    /// Log entries to store (empty for heartbeat)
    #[prost(message, repeated, tag = "5")]
    pub entries: ::prost::alloc::vec::Vec<LogEntry>,
    /// Leader's commit index
    #[prost(uint64, tag = "6")]
    pub leader_commit: u64,
    /// Request metadata
    #[prost(message, optional, tag = "7")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Performance optimization fields
    ///
    /// Whether this is a heartbeat
    #[prost(bool, tag = "8")]
    pub is_heartbeat: bool,
    /// Number of entries in batch
    #[prost(uint32, tag = "9")]
    pub batch_size: u32,
    /// Total size of batch in bytes
    #[prost(uint64, tag = "10")]
    pub total_batch_size_bytes: u64,
    /// Leader state information
    ///
    /// Leader's total log size
    #[prost(uint64, tag = "11")]
    pub leader_log_size: u64,
    /// Leader's last snapshot index
    #[prost(uint64, tag = "12")]
    pub leader_snapshot_index: u64,
    /// Flow control information
    ///
    /// Max entries follower can handle
    #[prost(uint32, tag = "13")]
    pub max_entries_per_request: u32,
    /// Max bytes follower can handle
    #[prost(uint32, tag = "14")]
    pub max_bytes_per_request: u32,
}
/// Response to append entries request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendEntriesResponse {
    /// Follower's current term
    #[prost(uint64, tag = "1")]
    pub term: u64,
    /// Whether entries were successfully appended
    #[prost(bool, tag = "2")]
    pub success: bool,
    /// Follower node ID
    #[prost(string, tag = "3")]
    pub follower_id: ::prost::alloc::string::String,
    /// Highest index known to be replicated
    #[prost(uint64, tag = "4")]
    pub match_index: u64,
    /// Response metadata
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Conflict resolution information (when success = false)
    ///
    /// Index where conflict was detected
    #[prost(uint64, tag = "6")]
    pub conflict_index: u64,
    /// Term of conflicting entry
    #[prost(uint64, tag = "7")]
    pub conflict_term: u64,
    /// First index of conflict term
    #[prost(uint64, tag = "8")]
    pub first_index_of_term: u64,
    /// Follower state information
    ///
    /// Follower's total log size
    #[prost(uint64, tag = "9")]
    pub follower_log_size: u64,
    /// Follower's commit index
    #[prost(uint64, tag = "10")]
    pub follower_commit_index: u64,
    /// Follower's applied index
    #[prost(uint64, tag = "11")]
    pub follower_applied_index: u64,
    /// Performance information
    ///
    /// Time taken to append entries
    #[prost(uint64, tag = "12")]
    pub append_time_ms: u64,
    /// Bytes successfully appended
    #[prost(uint64, tag = "13")]
    pub bytes_appended: u64,
    /// Flow control feedback
    ///
    /// Preferred max entries per request
    #[prost(uint32, tag = "14")]
    pub preferred_max_entries: u32,
    /// Preferred max bytes per request
    #[prost(uint32, tag = "15")]
    pub preferred_max_bytes: u32,
}
/// Individual log entry in the Raft log
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogEntry {
    /// Log entry index
    #[prost(uint64, tag = "1")]
    pub index: u64,
    /// Term when entry was created
    #[prost(uint64, tag = "2")]
    pub term: u64,
    /// Type of log entry
    #[prost(enumeration = "LogEntryType", tag = "3")]
    pub r#type: i32,
    /// Entry payload data
    #[prost(bytes = "vec", tag = "4")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    /// Entry creation timestamp
    #[prost(message, optional, tag = "5")]
    pub timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Node that created the entry
    #[prost(string, tag = "6")]
    pub node_id: ::prost::alloc::string::String,
    /// Entry metadata
    ///
    /// Entry checksum for integrity
    #[prost(uint32, tag = "7")]
    pub checksum: u32,
    /// Size of data payload
    #[prost(uint32, tag = "8")]
    pub data_size: u32,
    /// Correlation ID for tracking
    #[prost(string, tag = "9")]
    pub correlation_id: ::prost::alloc::string::String,
    /// Entry-specific context
    ///
    /// Entry priority for processing
    #[prost(uint32, tag = "10")]
    pub priority: u32,
    /// Tags for categorization
    #[prost(string, repeated, tag = "11")]
    pub tags: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Install snapshot request for fast follower catch-up
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstallSnapshotRequest {
    /// Leader's current term
    #[prost(uint64, tag = "1")]
    pub term: u64,
    /// Leader node ID
    #[prost(string, tag = "2")]
    pub leader_id: ::prost::alloc::string::String,
    /// Last log index covered by snapshot
    #[prost(uint64, tag = "3")]
    pub last_included_index: u64,
    /// Term of last_included_index
    #[prost(uint64, tag = "4")]
    pub last_included_term: u64,
    /// Byte offset of chunk in snapshot
    #[prost(uint64, tag = "5")]
    pub offset: u64,
    /// Chunk of snapshot data
    #[prost(bytes = "vec", tag = "6")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    /// Whether this is the last chunk
    #[prost(bool, tag = "7")]
    pub done: bool,
    /// Request metadata
    #[prost(message, optional, tag = "8")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Snapshot metadata
    ///
    /// Total snapshot size
    #[prost(uint64, tag = "9")]
    pub snapshot_size_bytes: u64,
    /// Size of this chunk
    #[prost(uint32, tag = "10")]
    pub chunk_size_bytes: u32,
    /// Index of this chunk
    #[prost(uint32, tag = "11")]
    pub chunk_index: u32,
    /// Total number of chunks
    #[prost(uint32, tag = "12")]
    pub total_chunks: u32,
    /// Unique snapshot identifier
    #[prost(string, tag = "13")]
    pub snapshot_id: ::prost::alloc::string::String,
    /// Snapshot checksum
    #[prost(uint32, tag = "14")]
    pub snapshot_checksum: u32,
    /// Snapshot creation time
    #[prost(message, optional, tag = "15")]
    pub snapshot_timestamp: ::core::option::Option<::prost_types::Timestamp>,
    /// Compression information
    ///
    /// Compression used
    #[prost(enumeration = "super::common::CompressionType", tag = "16")]
    pub compression: i32,
    /// Uncompressed chunk size
    #[prost(uint64, tag = "17")]
    pub uncompressed_size: u64,
}
/// Response to install snapshot request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstallSnapshotResponse {
    /// Follower's current term
    #[prost(uint64, tag = "1")]
    pub term: u64,
    /// Whether chunk was successfully installed
    #[prost(bool, tag = "2")]
    pub success: bool,
    /// Follower node ID
    #[prost(string, tag = "3")]
    pub follower_id: ::prost::alloc::string::String,
    /// Total bytes received so far
    #[prost(uint64, tag = "4")]
    pub bytes_received: u64,
    /// Response metadata
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Installation progress information
    ///
    /// Number of chunks received
    #[prost(uint32, tag = "6")]
    pub chunks_received: u32,
    /// Installation progress (0-1)
    #[prost(double, tag = "7")]
    pub installation_progress: f64,
    /// Time spent on installation
    #[prost(uint64, tag = "8")]
    pub installation_time_ms: u64,
    /// Flow control and performance feedback
    ///
    /// Preferred chunk size for future requests
    #[prost(uint32, tag = "9")]
    pub preferred_chunk_size: u32,
    /// Available disk space
    #[prost(uint64, tag = "10")]
    pub available_disk_space: u64,
    /// Current CPU usage
    #[prost(double, tag = "11")]
    pub cpu_usage: f64,
    /// Current memory usage
    #[prost(double, tag = "12")]
    pub memory_usage: f64,
    /// Error information (when success = false)
    ///
    /// Detailed error information
    #[prost(string, tag = "13")]
    pub error_details: ::prost::alloc::string::String,
    /// Whether to retry this chunk
    #[prost(bool, tag = "14")]
    pub retry_chunk: bool,
}
/// Pre-vote request for election optimization
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PreVoteRequest {
    /// Candidate's current term + 1
    #[prost(uint64, tag = "1")]
    pub term: u64,
    /// Candidate node ID
    #[prost(string, tag = "2")]
    pub candidate_id: ::prost::alloc::string::String,
    /// Index of candidate's last log entry
    #[prost(uint64, tag = "3")]
    pub last_log_index: u64,
    /// Term of candidate's last log entry
    #[prost(uint64, tag = "4")]
    pub last_log_term: u64,
    /// Request metadata
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Pre-vote context
    ///
    /// Reason for pre-vote
    #[prost(string, tag = "6")]
    pub election_reason: ::prost::alloc::string::String,
    /// Leader lease timeout
    #[prost(uint64, tag = "7")]
    pub leader_lease_timeout_ms: u64,
    /// Last contact with leader
    #[prost(message, optional, tag = "8")]
    pub last_leader_contact: ::core::option::Option<::prost_types::Timestamp>,
    /// Candidate capabilities
    ///
    /// Candidate capabilities
    #[prost(string, repeated, tag = "9")]
    pub candidate_capabilities: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Candidate priority
    #[prost(uint32, tag = "10")]
    pub candidate_priority: u32,
}
/// Response to pre-vote request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PreVoteResponse {
    /// Responder's current term
    #[prost(uint64, tag = "1")]
    pub term: u64,
    /// Whether pre-vote was granted
    #[prost(bool, tag = "2")]
    pub vote_granted: bool,
    /// Voting node ID
    #[prost(string, tag = "3")]
    pub voter_id: ::prost::alloc::string::String,
    /// Response metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Vote decision context
    ///
    /// Reason for vote decision
    #[prost(string, tag = "5")]
    pub vote_reason: ::prost::alloc::string::String,
    /// Whether voter believes there's a leader
    #[prost(bool, tag = "6")]
    pub has_leader: bool,
    /// Current leader (if known)
    #[prost(string, tag = "7")]
    pub current_leader_id: ::prost::alloc::string::String,
}
/// Transfer leadership request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferLeadershipRequest {
    /// Current leader node ID
    #[prost(string, tag = "1")]
    pub current_leader_id: ::prost::alloc::string::String,
    /// Desired new leader node ID
    #[prost(string, tag = "2")]
    pub target_leader_id: ::prost::alloc::string::String,
    /// Transfer timeout
    #[prost(uint64, tag = "3")]
    pub timeout_ms: u64,
    /// Request metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Transfer context
    ///
    /// Reason for leadership transfer
    #[prost(string, tag = "5")]
    pub transfer_reason: ::prost::alloc::string::String,
    /// Force transfer even if risky
    #[prost(bool, tag = "6")]
    pub force_transfer: bool,
}
/// Response to leadership transfer request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferLeadershipResponse {
    /// Whether transfer succeeded
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error code (0 = success)
    #[prost(uint32, tag = "2")]
    pub error_code: u32,
    /// Human-readable error message
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Actual new leader ID
    #[prost(string, tag = "4")]
    pub new_leader_id: ::prost::alloc::string::String,
    /// New term after transfer
    #[prost(uint64, tag = "5")]
    pub new_term: u64,
    /// Response metadata
    #[prost(message, optional, tag = "6")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Transfer result information
    ///
    /// Time taken for transfer
    #[prost(uint64, tag = "7")]
    pub transfer_time_ms: u64,
    /// Final log index after transfer
    #[prost(uint64, tag = "8")]
    pub final_log_index: u64,
}
/// Get cluster information request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClusterInfoRequest {
    /// Request metadata
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Information scope options
    ///
    /// Include detailed node information
    #[prost(bool, tag = "2")]
    pub include_node_details: bool,
    /// Include log information
    #[prost(bool, tag = "3")]
    pub include_log_info: bool,
    /// Include performance data
    #[prost(bool, tag = "4")]
    pub include_performance_metrics: bool,
}
/// Response with cluster information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetClusterInfoResponse {
    /// Whether request succeeded
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error code (0 = success)
    #[prost(uint32, tag = "2")]
    pub error_code: u32,
    /// Human-readable error message
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Response metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Cluster state information
    ///
    /// Cluster identifier
    #[prost(string, tag = "5")]
    pub cluster_id: ::prost::alloc::string::String,
    /// Current leader node ID
    #[prost(string, tag = "6")]
    pub current_leader_id: ::prost::alloc::string::String,
    /// Current term
    #[prost(uint64, tag = "7")]
    pub current_term: u64,
    /// Information about all nodes
    #[prost(message, repeated, tag = "8")]
    pub nodes: ::prost::alloc::vec::Vec<NodeInfo>,
    /// Log state information
    ///
    /// Current commit index
    #[prost(uint64, tag = "9")]
    pub commit_index: u64,
    /// Current applied index
    #[prost(uint64, tag = "10")]
    pub applied_index: u64,
    /// Total log size
    #[prost(uint64, tag = "11")]
    pub log_size: u64,
    /// Last snapshot index
    #[prost(uint64, tag = "12")]
    pub snapshot_index: u64,
    /// Cluster health and performance
    ///
    /// Overall cluster health
    #[prost(message, optional, tag = "13")]
    pub health: ::core::option::Option<ClusterHealth>,
    /// Cluster performance metrics
    #[prost(message, optional, tag = "14")]
    pub performance: ::core::option::Option<super::common::PerformanceMetrics>,
}
/// Information about a single node in the cluster
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeInfo {
    /// Node identifier
    #[prost(string, tag = "1")]
    pub node_id: ::prost::alloc::string::String,
    /// Node network address
    #[prost(string, tag = "2")]
    pub address: ::prost::alloc::string::String,
    /// Current node state
    #[prost(enumeration = "NodeState", tag = "3")]
    pub state: i32,
    /// Node's current term
    #[prost(uint64, tag = "4")]
    pub term: u64,
    /// Node's last log index
    #[prost(uint64, tag = "5")]
    pub last_log_index: u64,
    /// Node's last log term
    #[prost(uint64, tag = "6")]
    pub last_log_term: u64,
    /// Node's commit index
    #[prost(uint64, tag = "7")]
    pub commit_index: u64,
    /// Node's applied index
    #[prost(uint64, tag = "8")]
    pub applied_index: u64,
    /// Last contact with this node
    #[prost(message, optional, tag = "9")]
    pub last_contact: ::core::option::Option<::prost_types::Timestamp>,
    /// Node health and performance
    ///
    /// Node health status
    #[prost(message, optional, tag = "10")]
    pub health: ::core::option::Option<NodeHealth>,
    /// Node performance metrics
    #[prost(message, optional, tag = "11")]
    pub performance: ::core::option::Option<super::common::PerformanceMetrics>,
    /// Node capabilities and metadata
    ///
    /// Node software version
    #[prost(string, tag = "12")]
    pub version: ::prost::alloc::string::String,
    /// Node capabilities
    #[prost(string, repeated, tag = "13")]
    pub capabilities: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Node priority for leader election
    #[prost(uint32, tag = "14")]
    pub priority: u32,
}
/// Cluster health status
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClusterHealth {
    /// Overall health status
    #[prost(enumeration = "HealthStatus", tag = "1")]
    pub status: i32,
    /// Number of healthy nodes
    #[prost(uint32, tag = "2")]
    pub healthy_nodes: u32,
    /// Total number of nodes
    #[prost(uint32, tag = "3")]
    pub total_nodes: u32,
    /// Consensus availability percentage
    #[prost(double, tag = "4")]
    pub consensus_availability: f64,
    /// List of current issues
    #[prost(string, repeated, tag = "5")]
    pub issues: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Performance indicators
    ///
    /// Average consensus latency
    #[prost(double, tag = "6")]
    pub average_latency_ms: f64,
    /// Operations per second
    #[prost(double, tag = "7")]
    pub throughput_ops_per_second: f64,
}
/// Node health status
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeHealth {
    /// Node health status
    #[prost(enumeration = "HealthStatus", tag = "1")]
    pub status: i32,
    /// CPU usage percentage
    #[prost(double, tag = "2")]
    pub cpu_usage: f64,
    /// Memory usage percentage
    #[prost(double, tag = "3")]
    pub memory_usage: f64,
    /// Disk usage in bytes
    #[prost(uint64, tag = "4")]
    pub disk_usage_bytes: u64,
    /// Network input rate
    #[prost(uint64, tag = "5")]
    pub network_in_bytes_per_sec: u64,
    /// Network output rate
    #[prost(uint64, tag = "6")]
    pub network_out_bytes_per_sec: u64,
    /// Current warnings
    #[prost(string, repeated, tag = "7")]
    pub warnings: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Add node to cluster request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddNodeRequest {
    /// New node identifier
    #[prost(string, tag = "1")]
    pub node_id: ::prost::alloc::string::String,
    /// New node network address
    #[prost(string, tag = "2")]
    pub node_address: ::prost::alloc::string::String,
    /// Whether node can vote
    #[prost(bool, tag = "3")]
    pub voting_member: bool,
    /// Request metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Node configuration
    ///
    /// Node capabilities
    #[prost(string, repeated, tag = "5")]
    pub capabilities: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Node priority
    #[prost(uint32, tag = "6")]
    pub priority: u32,
    /// Node software version
    #[prost(string, tag = "7")]
    pub version: ::prost::alloc::string::String,
}
/// Response to add node request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddNodeResponse {
    /// Whether node was added
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error code (0 = success)
    #[prost(uint32, tag = "2")]
    pub error_code: u32,
    /// Human-readable error message
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Response metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Addition result information
    ///
    /// Log index of configuration change
    #[prost(uint64, tag = "5")]
    pub configuration_index: u64,
    /// Term of configuration change
    #[prost(uint64, tag = "6")]
    pub configuration_term: u64,
}
/// Remove node from cluster request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveNodeRequest {
    /// Node to remove
    #[prost(string, tag = "1")]
    pub node_id: ::prost::alloc::string::String,
    /// Force removal even if unsafe
    #[prost(bool, tag = "2")]
    pub force_removal: bool,
    /// Request metadata
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Removal context
    ///
    /// Reason for removal
    #[prost(string, tag = "4")]
    pub removal_reason: ::prost::alloc::string::String,
}
/// Response to remove node request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemoveNodeResponse {
    /// Whether node was removed
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error code (0 = success)
    #[prost(uint32, tag = "2")]
    pub error_code: u32,
    /// Human-readable error message
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Response metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Removal result information
    ///
    /// Log index of configuration change
    #[prost(uint64, tag = "5")]
    pub configuration_index: u64,
    /// Term of configuration change
    #[prost(uint64, tag = "6")]
    pub configuration_term: u64,
}
/// Raft node state enumeration
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NodeState {
    /// Follower state
    Follower = 0,
    /// Candidate state (during election)
    Candidate = 1,
    /// Leader state
    Leader = 2,
    /// Pre-candidate state (for pre-vote optimization)
    PreCandidate = 3,
    /// Observer state (non-voting member)
    Observer = 4,
    /// Shutting down
    Shutdown = 5,
}
impl NodeState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            NodeState::Follower => "NODE_STATE_FOLLOWER",
            NodeState::Candidate => "NODE_STATE_CANDIDATE",
            NodeState::Leader => "NODE_STATE_LEADER",
            NodeState::PreCandidate => "NODE_STATE_PRE_CANDIDATE",
            NodeState::Observer => "NODE_STATE_OBSERVER",
            NodeState::Shutdown => "NODE_STATE_SHUTDOWN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NODE_STATE_FOLLOWER" => Some(Self::Follower),
            "NODE_STATE_CANDIDATE" => Some(Self::Candidate),
            "NODE_STATE_LEADER" => Some(Self::Leader),
            "NODE_STATE_PRE_CANDIDATE" => Some(Self::PreCandidate),
            "NODE_STATE_OBSERVER" => Some(Self::Observer),
            "NODE_STATE_SHUTDOWN" => Some(Self::Shutdown),
            _ => None,
        }
    }
}
/// Raft log entry types
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LogEntryType {
    Unknown = 0,
    /// No-operation entry (used by new leaders)
    NoOp = 1,
    /// Cluster configuration change
    Configuration = 2,
    /// Broker metadata update
    BrokerMetadata = 3,
    /// Topic metadata update
    TopicMetadata = 4,
    /// Partition assignment change
    PartitionAssignment = 5,
    /// Partition leadership change
    LeadershipChange = 6,
    /// Broker scaling operation
    ScalingOperation = 7,
    /// Rolling upgrade operation
    UpgradeOperation = 8,
    /// Administrative operation
    AdminOperation = 9,
    /// Heartbeat/keepalive entry
    Heartbeat = 10,
}
impl LogEntryType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            LogEntryType::Unknown => "LOG_ENTRY_TYPE_UNKNOWN",
            LogEntryType::NoOp => "LOG_ENTRY_TYPE_NO_OP",
            LogEntryType::Configuration => "LOG_ENTRY_TYPE_CONFIGURATION",
            LogEntryType::BrokerMetadata => "LOG_ENTRY_TYPE_BROKER_METADATA",
            LogEntryType::TopicMetadata => "LOG_ENTRY_TYPE_TOPIC_METADATA",
            LogEntryType::PartitionAssignment => "LOG_ENTRY_TYPE_PARTITION_ASSIGNMENT",
            LogEntryType::LeadershipChange => "LOG_ENTRY_TYPE_LEADERSHIP_CHANGE",
            LogEntryType::ScalingOperation => "LOG_ENTRY_TYPE_SCALING_OPERATION",
            LogEntryType::UpgradeOperation => "LOG_ENTRY_TYPE_UPGRADE_OPERATION",
            LogEntryType::AdminOperation => "LOG_ENTRY_TYPE_ADMIN_OPERATION",
            LogEntryType::Heartbeat => "LOG_ENTRY_TYPE_HEARTBEAT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LOG_ENTRY_TYPE_UNKNOWN" => Some(Self::Unknown),
            "LOG_ENTRY_TYPE_NO_OP" => Some(Self::NoOp),
            "LOG_ENTRY_TYPE_CONFIGURATION" => Some(Self::Configuration),
            "LOG_ENTRY_TYPE_BROKER_METADATA" => Some(Self::BrokerMetadata),
            "LOG_ENTRY_TYPE_TOPIC_METADATA" => Some(Self::TopicMetadata),
            "LOG_ENTRY_TYPE_PARTITION_ASSIGNMENT" => Some(Self::PartitionAssignment),
            "LOG_ENTRY_TYPE_LEADERSHIP_CHANGE" => Some(Self::LeadershipChange),
            "LOG_ENTRY_TYPE_SCALING_OPERATION" => Some(Self::ScalingOperation),
            "LOG_ENTRY_TYPE_UPGRADE_OPERATION" => Some(Self::UpgradeOperation),
            "LOG_ENTRY_TYPE_ADMIN_OPERATION" => Some(Self::AdminOperation),
            "LOG_ENTRY_TYPE_HEARTBEAT" => Some(Self::Heartbeat),
            _ => None,
        }
    }
}
/// Health status enumeration
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum HealthStatus {
    Unknown = 0,
    Healthy = 1,
    Warning = 2,
    Critical = 3,
    Offline = 4,
}
impl HealthStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            HealthStatus::Unknown => "HEALTH_STATUS_UNKNOWN",
            HealthStatus::Healthy => "HEALTH_STATUS_HEALTHY",
            HealthStatus::Warning => "HEALTH_STATUS_WARNING",
            HealthStatus::Critical => "HEALTH_STATUS_CRITICAL",
            HealthStatus::Offline => "HEALTH_STATUS_OFFLINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEALTH_STATUS_UNKNOWN" => Some(Self::Unknown),
            "HEALTH_STATUS_HEALTHY" => Some(Self::Healthy),
            "HEALTH_STATUS_WARNING" => Some(Self::Warning),
            "HEALTH_STATUS_CRITICAL" => Some(Self::Critical),
            "HEALTH_STATUS_OFFLINE" => Some(Self::Offline),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod controller_raft_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Raft consensus service for controller cluster coordination
    /// Implements the standard Raft consensus algorithm with RustMQ-specific extensions
    #[derive(Debug, Clone)]
    pub struct ControllerRaftServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ControllerRaftServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ControllerRaftServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ControllerRaftServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            ControllerRaftServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Request votes for leader election (Raft standard)
        pub async fn request_vote(
            &mut self,
            request: impl tonic::IntoRequest<super::RequestVoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RequestVoteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.controller.ControllerRaftService/RequestVote",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.controller.ControllerRaftService",
                        "RequestVote",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Append log entries for replication (Raft standard)
        pub async fn append_entries(
            &mut self,
            request: impl tonic::IntoRequest<super::AppendEntriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AppendEntriesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.controller.ControllerRaftService/AppendEntries",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.controller.ControllerRaftService",
                        "AppendEntries",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Install snapshot for lagging followers (Raft standard)
        pub async fn install_snapshot(
            &mut self,
            request: impl tonic::IntoRequest<super::InstallSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InstallSnapshotResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.controller.ControllerRaftService/InstallSnapshot",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.controller.ControllerRaftService",
                        "InstallSnapshot",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Pre-vote request for leader election optimization
        pub async fn pre_vote(
            &mut self,
            request: impl tonic::IntoRequest<super::PreVoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PreVoteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.controller.ControllerRaftService/PreVote",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rustmq.controller.ControllerRaftService", "PreVote"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Transfer leadership to another node
        pub async fn transfer_leadership(
            &mut self,
            request: impl tonic::IntoRequest<super::TransferLeadershipRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransferLeadershipResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.controller.ControllerRaftService/TransferLeadership",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.controller.ControllerRaftService",
                        "TransferLeadership",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Get cluster membership information
        pub async fn get_cluster_info(
            &mut self,
            request: impl tonic::IntoRequest<super::GetClusterInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetClusterInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.controller.ControllerRaftService/GetClusterInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.controller.ControllerRaftService",
                        "GetClusterInfo",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Add new node to cluster
        pub async fn add_node(
            &mut self,
            request: impl tonic::IntoRequest<super::AddNodeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AddNodeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.controller.ControllerRaftService/AddNode",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rustmq.controller.ControllerRaftService", "AddNode"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Remove node from cluster
        pub async fn remove_node(
            &mut self,
            request: impl tonic::IntoRequest<super::RemoveNodeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveNodeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.controller.ControllerRaftService/RemoveNode",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.controller.ControllerRaftService",
                        "RemoveNode",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod controller_raft_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ControllerRaftServiceServer.
    #[async_trait]
    pub trait ControllerRaftService: Send + Sync + 'static {
        /// Request votes for leader election (Raft standard)
        async fn request_vote(
            &self,
            request: tonic::Request<super::RequestVoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RequestVoteResponse>,
            tonic::Status,
        >;
        /// Append log entries for replication (Raft standard)
        async fn append_entries(
            &self,
            request: tonic::Request<super::AppendEntriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AppendEntriesResponse>,
            tonic::Status,
        >;
        /// Install snapshot for lagging followers (Raft standard)
        async fn install_snapshot(
            &self,
            request: tonic::Request<super::InstallSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::InstallSnapshotResponse>,
            tonic::Status,
        >;
        /// Pre-vote request for leader election optimization
        async fn pre_vote(
            &self,
            request: tonic::Request<super::PreVoteRequest>,
        ) -> std::result::Result<tonic::Response<super::PreVoteResponse>, tonic::Status>;
        /// Transfer leadership to another node
        async fn transfer_leadership(
            &self,
            request: tonic::Request<super::TransferLeadershipRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransferLeadershipResponse>,
            tonic::Status,
        >;
        /// Get cluster membership information
        async fn get_cluster_info(
            &self,
            request: tonic::Request<super::GetClusterInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetClusterInfoResponse>,
            tonic::Status,
        >;
        /// Add new node to cluster
        async fn add_node(
            &self,
            request: tonic::Request<super::AddNodeRequest>,
        ) -> std::result::Result<tonic::Response<super::AddNodeResponse>, tonic::Status>;
        /// Remove node from cluster
        async fn remove_node(
            &self,
            request: tonic::Request<super::RemoveNodeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemoveNodeResponse>,
            tonic::Status,
        >;
    }
    /// Raft consensus service for controller cluster coordination
    /// Implements the standard Raft consensus algorithm with RustMQ-specific extensions
    #[derive(Debug)]
    pub struct ControllerRaftServiceServer<T: ControllerRaftService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: ControllerRaftService> ControllerRaftServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for ControllerRaftServiceServer<T>
    where
        T: ControllerRaftService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/rustmq.controller.ControllerRaftService/RequestVote" => {
                    #[allow(non_camel_case_types)]
                    struct RequestVoteSvc<T: ControllerRaftService>(pub Arc<T>);
                    impl<
                        T: ControllerRaftService,
                    > tonic::server::UnaryService<super::RequestVoteRequest>
                    for RequestVoteSvc<T> {
                        type Response = super::RequestVoteResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RequestVoteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ControllerRaftService>::request_vote(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RequestVoteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.controller.ControllerRaftService/AppendEntries" => {
                    #[allow(non_camel_case_types)]
                    struct AppendEntriesSvc<T: ControllerRaftService>(pub Arc<T>);
                    impl<
                        T: ControllerRaftService,
                    > tonic::server::UnaryService<super::AppendEntriesRequest>
                    for AppendEntriesSvc<T> {
                        type Response = super::AppendEntriesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AppendEntriesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ControllerRaftService>::append_entries(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AppendEntriesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.controller.ControllerRaftService/InstallSnapshot" => {
                    #[allow(non_camel_case_types)]
                    struct InstallSnapshotSvc<T: ControllerRaftService>(pub Arc<T>);
                    impl<
                        T: ControllerRaftService,
                    > tonic::server::UnaryService<super::InstallSnapshotRequest>
                    for InstallSnapshotSvc<T> {
                        type Response = super::InstallSnapshotResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::InstallSnapshotRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ControllerRaftService>::install_snapshot(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = InstallSnapshotSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.controller.ControllerRaftService/PreVote" => {
                    #[allow(non_camel_case_types)]
                    struct PreVoteSvc<T: ControllerRaftService>(pub Arc<T>);
                    impl<
                        T: ControllerRaftService,
                    > tonic::server::UnaryService<super::PreVoteRequest>
                    for PreVoteSvc<T> {
                        type Response = super::PreVoteResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PreVoteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ControllerRaftService>::pre_vote(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PreVoteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.controller.ControllerRaftService/TransferLeadership" => {
                    #[allow(non_camel_case_types)]
                    struct TransferLeadershipSvc<T: ControllerRaftService>(pub Arc<T>);
                    impl<
                        T: ControllerRaftService,
                    > tonic::server::UnaryService<super::TransferLeadershipRequest>
                    for TransferLeadershipSvc<T> {
                        type Response = super::TransferLeadershipResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TransferLeadershipRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ControllerRaftService>::transfer_leadership(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = TransferLeadershipSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.controller.ControllerRaftService/GetClusterInfo" => {
                    #[allow(non_camel_case_types)]
                    struct GetClusterInfoSvc<T: ControllerRaftService>(pub Arc<T>);
                    impl<
                        T: ControllerRaftService,
                    > tonic::server::UnaryService<super::GetClusterInfoRequest>
                    for GetClusterInfoSvc<T> {
                        type Response = super::GetClusterInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetClusterInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ControllerRaftService>::get_cluster_info(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetClusterInfoSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.controller.ControllerRaftService/AddNode" => {
                    #[allow(non_camel_case_types)]
                    struct AddNodeSvc<T: ControllerRaftService>(pub Arc<T>);
                    impl<
                        T: ControllerRaftService,
                    > tonic::server::UnaryService<super::AddNodeRequest>
                    for AddNodeSvc<T> {
                        type Response = super::AddNodeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AddNodeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ControllerRaftService>::add_node(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AddNodeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.controller.ControllerRaftService/RemoveNode" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveNodeSvc<T: ControllerRaftService>(pub Arc<T>);
                    impl<
                        T: ControllerRaftService,
                    > tonic::server::UnaryService<super::RemoveNodeRequest>
                    for RemoveNodeSvc<T> {
                        type Response = super::RemoveNodeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemoveNodeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ControllerRaftService>::remove_node(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RemoveNodeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: ControllerRaftService> Clone for ControllerRaftServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: ControllerRaftService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: ControllerRaftService> tonic::server::NamedService
    for ControllerRaftServiceServer<T> {
        const NAME: &'static str = "rustmq.controller.ControllerRaftService";
    }
}
