// This file is @generated by prost-build.
/// Request to replicate data from leader to follower
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplicateDataRequest {
    /// Current leader epoch (CRITICAL for safety)
    #[prost(uint64, tag = "1")]
    pub leader_epoch: u64,
    /// Target topic and partition
    #[prost(message, optional, tag = "2")]
    pub topic_partition: ::core::option::Option<super::common::TopicPartition>,
    /// Records to replicate
    #[prost(message, repeated, tag = "3")]
    pub records: ::prost::alloc::vec::Vec<super::common::WalRecord>,
    /// Leader broker ID
    #[prost(string, tag = "4")]
    pub leader_id: ::prost::alloc::string::String,
    /// Leader's high watermark
    #[prost(uint64, tag = "5")]
    pub leader_high_watermark: u64,
    /// Unique request ID for deduplication
    #[prost(uint64, tag = "6")]
    pub request_id: u64,
    /// Request metadata
    #[prost(message, optional, tag = "7")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Batch information for performance optimization
    ///
    /// Base offset for this batch
    #[prost(uint64, tag = "8")]
    pub batch_base_offset: u64,
    /// Number of records in batch
    #[prost(uint32, tag = "9")]
    pub batch_record_count: u32,
    /// Total batch size in bytes
    #[prost(uint64, tag = "10")]
    pub batch_size_bytes: u64,
    /// Optional compression information
    ///
    /// Compression used for records
    #[prost(enumeration = "super::common::CompressionType", tag = "11")]
    pub compression: i32,
}
/// Response to replication data request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplicateDataResponse {
    /// Whether replication succeeded
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error code (0 = success)
    #[prost(uint32, tag = "2")]
    pub error_code: u32,
    /// Human-readable error message
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Current follower state
    #[prost(message, optional, tag = "4")]
    pub follower_state: ::core::option::Option<super::common::FollowerState>,
    /// Response metadata
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Replication performance metrics
    ///
    /// Bytes successfully replicated
    #[prost(uint64, tag = "6")]
    pub bytes_replicated: u64,
    /// Records successfully replicated
    #[prost(uint64, tag = "7")]
    pub records_replicated: u64,
    /// Time taken for replication
    #[prost(uint64, tag = "8")]
    pub replication_time_ms: u64,
    /// Follower feedback for leader optimization
    ///
    /// Follower's log end offset
    #[prost(uint64, tag = "9")]
    pub follower_log_end_offset: u64,
    /// Follower's high watermark
    #[prost(uint64, tag = "10")]
    pub follower_high_watermark: u64,
}
/// Heartbeat request from leader to follower
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatRequest {
    /// Current leader epoch (CRITICAL for safety)
    #[prost(uint64, tag = "1")]
    pub leader_epoch: u64,
    /// Leader broker ID
    #[prost(string, tag = "2")]
    pub leader_id: ::prost::alloc::string::String,
    /// Target topic and partition
    #[prost(message, optional, tag = "3")]
    pub topic_partition: ::core::option::Option<super::common::TopicPartition>,
    /// Leader's high watermark
    #[prost(uint64, tag = "4")]
    pub high_watermark: u64,
    /// Request metadata
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Additional leader state information
    ///
    /// Leader's log end offset
    #[prost(uint64, tag = "6")]
    pub leader_log_end_offset: u64,
    /// Current ISR members
    #[prost(string, repeated, tag = "7")]
    pub in_sync_replicas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Expected heartbeat interval
    #[prost(uint32, tag = "8")]
    pub heartbeat_interval_ms: u32,
    /// Performance monitoring data
    ///
    /// Leader throughput
    #[prost(uint64, tag = "9")]
    pub leader_messages_per_second: u64,
    /// Leader byte rate
    #[prost(uint64, tag = "10")]
    pub leader_bytes_per_second: u64,
}
/// Response to heartbeat request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatResponse {
    /// Whether heartbeat was accepted
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error code (0 = success)
    #[prost(uint32, tag = "2")]
    pub error_code: u32,
    /// Human-readable error message
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Current follower state
    #[prost(message, optional, tag = "4")]
    pub follower_state: ::core::option::Option<super::common::FollowerState>,
    /// Response metadata
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Follower health and performance information
    ///
    /// CPU usage percentage
    #[prost(double, tag = "6")]
    pub follower_cpu_usage: f64,
    /// Memory usage percentage
    #[prost(double, tag = "7")]
    pub follower_memory_usage: f64,
    /// Disk usage in bytes
    #[prost(uint64, tag = "8")]
    pub follower_disk_usage_bytes: u64,
    /// Network input bytes
    #[prost(uint64, tag = "9")]
    pub follower_network_in_bytes: u64,
    /// Network output bytes
    #[prost(uint64, tag = "10")]
    pub follower_network_out_bytes: u64,
    /// Follower capabilities and preferences
    ///
    /// Supported compression types
    #[prost(string, repeated, tag = "11")]
    pub supported_compression: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Maximum batch size preference
    #[prost(uint32, tag = "12")]
    pub max_batch_size_bytes: u32,
}
/// Request to transfer partition leadership
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferLeadershipRequest {
    /// Target topic and partition
    #[prost(message, optional, tag = "1")]
    pub topic_partition: ::core::option::Option<super::common::TopicPartition>,
    /// Current leader broker ID
    #[prost(string, tag = "2")]
    pub current_leader_id: ::prost::alloc::string::String,
    /// Current leader epoch
    #[prost(uint64, tag = "3")]
    pub current_leader_epoch: u64,
    /// Desired new leader broker ID
    #[prost(string, tag = "4")]
    pub new_leader_id: ::prost::alloc::string::String,
    /// Request metadata
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Transfer coordination information
    ///
    /// Controller coordinating transfer
    #[prost(string, tag = "6")]
    pub controller_id: ::prost::alloc::string::String,
    /// Controller epoch
    #[prost(uint64, tag = "7")]
    pub controller_epoch: u64,
    /// Transfer timeout
    #[prost(uint32, tag = "8")]
    pub transfer_timeout_ms: u32,
    /// Optional transfer preferences
    ///
    /// Force transfer even if risky
    #[prost(bool, tag = "9")]
    pub force_transfer: bool,
    /// Wait for new leader to sync
    #[prost(bool, tag = "10")]
    pub wait_for_sync: bool,
}
/// Response to leadership transfer request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferLeadershipResponse {
    /// Whether transfer succeeded
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error code (0 = success)
    #[prost(uint32, tag = "2")]
    pub error_code: u32,
    /// Human-readable error message
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// New leader epoch (if successful)
    #[prost(uint64, tag = "4")]
    pub new_leader_epoch: u64,
    /// Response metadata
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Transfer completion information
    ///
    /// Actual new leader (may differ from request)
    #[prost(string, tag = "6")]
    pub actual_new_leader_id: ::prost::alloc::string::String,
    /// Time taken for transfer
    #[prost(uint64, tag = "7")]
    pub transfer_time_ms: u64,
    /// Final log end offset
    #[prost(uint64, tag = "8")]
    pub final_log_end_offset: u64,
    /// Post-transfer state
    ///
    /// ISR after transfer
    #[prost(string, repeated, tag = "9")]
    pub new_isr: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Request to assign partition to broker from controller
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssignPartitionRequest {
    /// Target topic and partition
    #[prost(message, optional, tag = "1")]
    pub topic_partition: ::core::option::Option<super::common::TopicPartition>,
    /// Full replica set
    #[prost(string, repeated, tag = "2")]
    pub replica_set: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Designated leader
    #[prost(string, tag = "3")]
    pub leader_id: ::prost::alloc::string::String,
    /// Initial leader epoch
    #[prost(uint64, tag = "4")]
    pub leader_epoch: u64,
    /// Controller making assignment
    #[prost(string, tag = "5")]
    pub controller_id: ::prost::alloc::string::String,
    /// Request metadata
    #[prost(message, optional, tag = "6")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Assignment context information
    ///
    /// Controller epoch
    #[prost(uint64, tag = "7")]
    pub controller_epoch: u64,
    /// Reason for assignment
    #[prost(string, tag = "8")]
    pub assignment_reason: ::prost::alloc::string::String,
    /// Topic configuration
    #[prost(message, optional, tag = "9")]
    pub topic_config: ::core::option::Option<super::common::TopicConfig>,
    /// Initial state information
    ///
    /// Starting offset (if applicable)
    #[prost(uint64, tag = "10")]
    pub initial_offset: u64,
    /// Whether this is a new partition
    #[prost(bool, tag = "11")]
    pub is_new_partition: bool,
    /// Performance and resource hints
    ///
    /// Expected throughput MB/s
    #[prost(uint64, tag = "12")]
    pub expected_throughput_mbs: u64,
    /// Assignment priority
    #[prost(uint32, tag = "13")]
    pub priority: u32,
}
/// Response to partition assignment request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssignPartitionResponse {
    /// Whether assignment succeeded
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error code (0 = success)
    #[prost(uint32, tag = "2")]
    pub error_code: u32,
    /// Human-readable error message
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Response metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Assignment result information
    ///
    /// Log end offset after assignment
    #[prost(uint64, tag = "5")]
    pub assigned_log_end_offset: u64,
    /// WAL path for this partition
    #[prost(string, tag = "6")]
    pub assigned_wal_path: ::prost::alloc::string::String,
    /// Estimated setup time
    #[prost(uint64, tag = "7")]
    pub estimated_setup_time_ms: u64,
    /// Resource allocation details
    ///
    /// Memory allocated for partition
    #[prost(uint64, tag = "8")]
    pub allocated_memory_bytes: u64,
    /// Disk space allocated
    #[prost(uint64, tag = "9")]
    pub allocated_disk_bytes: u64,
    /// Network bandwidth allocated
    #[prost(uint32, tag = "10")]
    pub allocated_network_mbs: u32,
}
/// Request to remove partition from broker
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemovePartitionRequest {
    /// Target topic and partition
    #[prost(message, optional, tag = "1")]
    pub topic_partition: ::core::option::Option<super::common::TopicPartition>,
    /// Controller requesting removal
    #[prost(string, tag = "2")]
    pub controller_id: ::prost::alloc::string::String,
    /// Request metadata
    #[prost(message, optional, tag = "3")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Removal context information
    ///
    /// Controller epoch
    #[prost(uint64, tag = "4")]
    pub controller_epoch: u64,
    /// Reason for removal
    #[prost(string, tag = "5")]
    pub removal_reason: ::prost::alloc::string::String,
    /// Whether to remove gracefully
    #[prost(bool, tag = "6")]
    pub graceful_removal: bool,
    /// Removal timeout
    #[prost(uint32, tag = "7")]
    pub removal_timeout_ms: u32,
    /// Data preservation options
    ///
    /// Whether to preserve data
    #[prost(bool, tag = "8")]
    pub preserve_data: bool,
    /// Optional backup location
    #[prost(string, tag = "9")]
    pub backup_location: ::prost::alloc::string::String,
}
/// Response to partition removal request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RemovePartitionResponse {
    /// Whether removal succeeded
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error code (0 = success)
    #[prost(uint32, tag = "2")]
    pub error_code: u32,
    /// Human-readable error message
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Response metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Removal result information
    ///
    /// Final log end offset
    #[prost(uint64, tag = "5")]
    pub final_log_end_offset: u64,
    /// Amount of data removed
    #[prost(uint64, tag = "6")]
    pub removed_data_bytes: u64,
    /// Time taken for removal
    #[prost(uint64, tag = "7")]
    pub removal_time_ms: u64,
    /// Resource cleanup details
    ///
    /// Memory freed
    #[prost(uint64, tag = "8")]
    pub freed_memory_bytes: u64,
    /// Disk space freed
    #[prost(uint64, tag = "9")]
    pub freed_disk_bytes: u64,
    /// Cleanup status description
    #[prost(string, tag = "10")]
    pub cleanup_status: ::prost::alloc::string::String,
}
/// Request for replication status information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplicationStatusRequest {
    /// Target topic and partition
    #[prost(message, optional, tag = "1")]
    pub topic_partition: ::core::option::Option<super::common::TopicPartition>,
    /// Request metadata
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Status query options
    ///
    /// Include detailed follower info
    #[prost(bool, tag = "3")]
    pub include_follower_details: bool,
    /// Include performance data
    #[prost(bool, tag = "4")]
    pub include_performance_metrics: bool,
    /// Include lag analysis
    #[prost(bool, tag = "5")]
    pub include_lag_analysis: bool,
}
/// Response with replication status information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplicationStatusResponse {
    /// Whether request succeeded
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error code (0 = success)
    #[prost(uint32, tag = "2")]
    pub error_code: u32,
    /// Human-readable error message
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Response metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Replication state information
    ///
    /// Current leader ID
    #[prost(string, tag = "5")]
    pub current_leader: ::prost::alloc::string::String,
    /// Current leader epoch
    #[prost(uint64, tag = "6")]
    pub leader_epoch: u64,
    /// Current ISR
    #[prost(string, repeated, tag = "7")]
    pub in_sync_replicas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Out-of-sync replicas
    #[prost(string, repeated, tag = "8")]
    pub out_of_sync_replicas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Performance metrics
    ///
    /// Max lag in messages
    #[prost(uint64, tag = "9")]
    pub replication_lag_messages: u64,
    /// Max lag in time
    #[prost(uint64, tag = "10")]
    pub replication_lag_time_ms: u64,
    /// Replication throughput
    #[prost(double, tag = "11")]
    pub replication_throughput_mbs: f64,
    /// Detailed follower information (if requested)
    ///
    /// Per-follower details
    #[prost(message, repeated, tag = "12")]
    pub follower_details: ::prost::alloc::vec::Vec<FollowerDetails>,
}
/// Detailed information about a specific follower
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FollowerDetails {
    /// Follower broker ID
    #[prost(string, tag = "1")]
    pub broker_id: ::prost::alloc::string::String,
    /// Follower state
    #[prost(message, optional, tag = "2")]
    pub state: ::core::option::Option<super::common::FollowerState>,
    /// Last fetched offset
    #[prost(uint64, tag = "3")]
    pub last_fetch_offset: u64,
    /// Last fetch timestamp
    #[prost(message, optional, tag = "4")]
    pub last_fetch_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Fetch rate MB/s
    #[prost(uint64, tag = "5")]
    pub fetch_rate_mbs: u64,
    /// Recent error count
    #[prost(uint32, tag = "6")]
    pub error_count: u32,
    /// Last error message
    #[prost(string, tag = "7")]
    pub last_error: ::prost::alloc::string::String,
    /// Health score (0-1)
    #[prost(double, tag = "8")]
    pub health_score: f64,
}
/// Request to sync ISR state with controller
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncIsrRequest {
    /// Target topic and partition
    #[prost(message, optional, tag = "1")]
    pub topic_partition: ::core::option::Option<super::common::TopicPartition>,
    /// Leader broker ID
    #[prost(string, tag = "2")]
    pub leader_id: ::prost::alloc::string::String,
    /// Current leader epoch
    #[prost(uint64, tag = "3")]
    pub leader_epoch: u64,
    /// Current ISR members
    #[prost(string, repeated, tag = "4")]
    pub current_isr: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Proposed ISR changes
    #[prost(string, repeated, tag = "5")]
    pub proposed_isr: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Request metadata
    #[prost(message, optional, tag = "6")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// ISR change context
    ///
    /// Reason for ISR change
    #[prost(string, tag = "7")]
    pub change_reason: ::prost::alloc::string::String,
    /// Replicas to add to ISR
    #[prost(string, repeated, tag = "8")]
    pub added_replicas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Replicas to remove from ISR
    #[prost(string, repeated, tag = "9")]
    pub removed_replicas: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Performance data supporting ISR changes
    ///
    /// Follower performance data
    #[prost(message, repeated, tag = "10")]
    pub follower_performance: ::prost::alloc::vec::Vec<FollowerDetails>,
}
/// Response to ISR sync request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncIsrResponse {
    /// Whether sync succeeded
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error code (0 = success)
    #[prost(uint32, tag = "2")]
    pub error_code: u32,
    /// Human-readable error message
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Response metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Updated ISR information
    ///
    /// Controller-approved ISR
    #[prost(string, repeated, tag = "5")]
    pub approved_isr: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// ISR version number
    #[prost(uint64, tag = "6")]
    pub isr_version: u64,
    /// Controller feedback
    ///
    /// Controller feedback/reasoning
    #[prost(string, tag = "7")]
    pub controller_comment: ::prost::alloc::string::String,
}
/// Request to truncate log to specific offset
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TruncateLogRequest {
    /// Target topic and partition
    #[prost(message, optional, tag = "1")]
    pub topic_partition: ::core::option::Option<super::common::TopicPartition>,
    /// Offset to truncate to
    #[prost(uint64, tag = "2")]
    pub truncate_offset: u64,
    /// Broker requesting truncation
    #[prost(string, tag = "3")]
    pub requester_id: ::prost::alloc::string::String,
    /// Requester's epoch
    #[prost(uint64, tag = "4")]
    pub requester_epoch: u64,
    /// Request metadata
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<super::common::RequestMetadata>,
    /// Truncation context
    ///
    /// Reason for truncation
    #[prost(string, tag = "6")]
    pub truncation_reason: ::prost::alloc::string::String,
    /// Force truncation even if unsafe
    #[prost(bool, tag = "7")]
    pub force_truncation: bool,
}
/// Response to log truncation request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TruncateLogResponse {
    /// Whether truncation succeeded
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error code (0 = success)
    #[prost(uint32, tag = "2")]
    pub error_code: u32,
    /// Human-readable error message
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// Response metadata
    #[prost(message, optional, tag = "4")]
    pub metadata: ::core::option::Option<super::common::ResponseMetadata>,
    /// Truncation result information
    ///
    /// Actual truncation offset
    #[prost(uint64, tag = "5")]
    pub actual_truncate_offset: u64,
    /// Bytes truncated
    #[prost(uint64, tag = "6")]
    pub truncated_bytes: u64,
    /// Time taken for truncation
    #[prost(uint64, tag = "7")]
    pub truncation_time_ms: u64,
    /// Post-truncation state
    ///
    /// New log end offset
    #[prost(uint64, tag = "8")]
    pub new_log_end_offset: u64,
    /// New high watermark
    #[prost(uint64, tag = "9")]
    pub new_high_watermark: u64,
}
/// Generated client implementations.
pub mod broker_replication_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Broker replication service for inter-broker communication
    /// All RPCs enforce leader epoch validation to prevent stale leader attacks
    /// This service implements the critical leader-follower replication protocol
    #[derive(Debug, Clone)]
    pub struct BrokerReplicationServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BrokerReplicationServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BrokerReplicationServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BrokerReplicationServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            BrokerReplicationServiceClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Replicate data from leader to follower
        /// CRITICAL: Must validate leader epoch to prevent stale leader attacks
        pub async fn replicate_data(
            &mut self,
            request: impl tonic::IntoRequest<super::ReplicateDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReplicateDataResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.broker.BrokerReplicationService/ReplicateData",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.broker.BrokerReplicationService",
                        "ReplicateData",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Send heartbeat from leader to follower
        /// CRITICAL: Must validate leader epoch to prevent stale leader attacks
        pub async fn send_heartbeat(
            &mut self,
            request: impl tonic::IntoRequest<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.broker.BrokerReplicationService/SendHeartbeat",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.broker.BrokerReplicationService",
                        "SendHeartbeat",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Transfer partition leadership to another broker
        /// Used for graceful leader transitions and load balancing
        pub async fn transfer_leadership(
            &mut self,
            request: impl tonic::IntoRequest<super::TransferLeadershipRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransferLeadershipResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.broker.BrokerReplicationService/TransferLeadership",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.broker.BrokerReplicationService",
                        "TransferLeadership",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Assign new partition to this broker from controller
        /// Used during partition rebalancing and broker scaling
        pub async fn assign_partition(
            &mut self,
            request: impl tonic::IntoRequest<super::AssignPartitionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AssignPartitionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.broker.BrokerReplicationService/AssignPartition",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.broker.BrokerReplicationService",
                        "AssignPartition",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Remove partition from this broker per controller request
        /// Used during partition rebalancing and broker decommissioning
        pub async fn remove_partition(
            &mut self,
            request: impl tonic::IntoRequest<super::RemovePartitionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemovePartitionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.broker.BrokerReplicationService/RemovePartition",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.broker.BrokerReplicationService",
                        "RemovePartition",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Fetch replication status for monitoring and debugging
        pub async fn get_replication_status(
            &mut self,
            request: impl tonic::IntoRequest<super::ReplicationStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReplicationStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.broker.BrokerReplicationService/GetReplicationStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.broker.BrokerReplicationService",
                        "GetReplicationStatus",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Sync ISR (In-Sync Replicas) state between leader and controller
        pub async fn sync_isr(
            &mut self,
            request: impl tonic::IntoRequest<super::SyncIsrRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SyncIsrResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.broker.BrokerReplicationService/SyncISR",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rustmq.broker.BrokerReplicationService", "SyncISR"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Request leader to truncate log to specific offset (used during recovery)
        pub async fn truncate_log(
            &mut self,
            request: impl tonic::IntoRequest<super::TruncateLogRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TruncateLogResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rustmq.broker.BrokerReplicationService/TruncateLog",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rustmq.broker.BrokerReplicationService",
                        "TruncateLog",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod broker_replication_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with BrokerReplicationServiceServer.
    #[async_trait]
    pub trait BrokerReplicationService: Send + Sync + 'static {
        /// Replicate data from leader to follower
        /// CRITICAL: Must validate leader epoch to prevent stale leader attacks
        async fn replicate_data(
            &self,
            request: tonic::Request<super::ReplicateDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReplicateDataResponse>,
            tonic::Status,
        >;
        /// Send heartbeat from leader to follower
        /// CRITICAL: Must validate leader epoch to prevent stale leader attacks
        async fn send_heartbeat(
            &self,
            request: tonic::Request<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        >;
        /// Transfer partition leadership to another broker
        /// Used for graceful leader transitions and load balancing
        async fn transfer_leadership(
            &self,
            request: tonic::Request<super::TransferLeadershipRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TransferLeadershipResponse>,
            tonic::Status,
        >;
        /// Assign new partition to this broker from controller
        /// Used during partition rebalancing and broker scaling
        async fn assign_partition(
            &self,
            request: tonic::Request<super::AssignPartitionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AssignPartitionResponse>,
            tonic::Status,
        >;
        /// Remove partition from this broker per controller request
        /// Used during partition rebalancing and broker decommissioning
        async fn remove_partition(
            &self,
            request: tonic::Request<super::RemovePartitionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RemovePartitionResponse>,
            tonic::Status,
        >;
        /// Fetch replication status for monitoring and debugging
        async fn get_replication_status(
            &self,
            request: tonic::Request<super::ReplicationStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReplicationStatusResponse>,
            tonic::Status,
        >;
        /// Sync ISR (In-Sync Replicas) state between leader and controller
        async fn sync_isr(
            &self,
            request: tonic::Request<super::SyncIsrRequest>,
        ) -> std::result::Result<tonic::Response<super::SyncIsrResponse>, tonic::Status>;
        /// Request leader to truncate log to specific offset (used during recovery)
        async fn truncate_log(
            &self,
            request: tonic::Request<super::TruncateLogRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TruncateLogResponse>,
            tonic::Status,
        >;
    }
    /// Broker replication service for inter-broker communication
    /// All RPCs enforce leader epoch validation to prevent stale leader attacks
    /// This service implements the critical leader-follower replication protocol
    #[derive(Debug)]
    pub struct BrokerReplicationServiceServer<T: BrokerReplicationService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: BrokerReplicationService> BrokerReplicationServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for BrokerReplicationServiceServer<T>
    where
        T: BrokerReplicationService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/rustmq.broker.BrokerReplicationService/ReplicateData" => {
                    #[allow(non_camel_case_types)]
                    struct ReplicateDataSvc<T: BrokerReplicationService>(pub Arc<T>);
                    impl<
                        T: BrokerReplicationService,
                    > tonic::server::UnaryService<super::ReplicateDataRequest>
                    for ReplicateDataSvc<T> {
                        type Response = super::ReplicateDataResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReplicateDataRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrokerReplicationService>::replicate_data(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ReplicateDataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.broker.BrokerReplicationService/SendHeartbeat" => {
                    #[allow(non_camel_case_types)]
                    struct SendHeartbeatSvc<T: BrokerReplicationService>(pub Arc<T>);
                    impl<
                        T: BrokerReplicationService,
                    > tonic::server::UnaryService<super::HeartbeatRequest>
                    for SendHeartbeatSvc<T> {
                        type Response = super::HeartbeatResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HeartbeatRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrokerReplicationService>::send_heartbeat(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SendHeartbeatSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.broker.BrokerReplicationService/TransferLeadership" => {
                    #[allow(non_camel_case_types)]
                    struct TransferLeadershipSvc<T: BrokerReplicationService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: BrokerReplicationService,
                    > tonic::server::UnaryService<super::TransferLeadershipRequest>
                    for TransferLeadershipSvc<T> {
                        type Response = super::TransferLeadershipResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TransferLeadershipRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrokerReplicationService>::transfer_leadership(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = TransferLeadershipSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.broker.BrokerReplicationService/AssignPartition" => {
                    #[allow(non_camel_case_types)]
                    struct AssignPartitionSvc<T: BrokerReplicationService>(pub Arc<T>);
                    impl<
                        T: BrokerReplicationService,
                    > tonic::server::UnaryService<super::AssignPartitionRequest>
                    for AssignPartitionSvc<T> {
                        type Response = super::AssignPartitionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AssignPartitionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrokerReplicationService>::assign_partition(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = AssignPartitionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.broker.BrokerReplicationService/RemovePartition" => {
                    #[allow(non_camel_case_types)]
                    struct RemovePartitionSvc<T: BrokerReplicationService>(pub Arc<T>);
                    impl<
                        T: BrokerReplicationService,
                    > tonic::server::UnaryService<super::RemovePartitionRequest>
                    for RemovePartitionSvc<T> {
                        type Response = super::RemovePartitionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RemovePartitionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrokerReplicationService>::remove_partition(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RemovePartitionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.broker.BrokerReplicationService/GetReplicationStatus" => {
                    #[allow(non_camel_case_types)]
                    struct GetReplicationStatusSvc<T: BrokerReplicationService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: BrokerReplicationService,
                    > tonic::server::UnaryService<super::ReplicationStatusRequest>
                    for GetReplicationStatusSvc<T> {
                        type Response = super::ReplicationStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReplicationStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrokerReplicationService>::get_replication_status(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetReplicationStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.broker.BrokerReplicationService/SyncISR" => {
                    #[allow(non_camel_case_types)]
                    struct SyncISRSvc<T: BrokerReplicationService>(pub Arc<T>);
                    impl<
                        T: BrokerReplicationService,
                    > tonic::server::UnaryService<super::SyncIsrRequest>
                    for SyncISRSvc<T> {
                        type Response = super::SyncIsrResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SyncIsrRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrokerReplicationService>::sync_isr(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SyncISRSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rustmq.broker.BrokerReplicationService/TruncateLog" => {
                    #[allow(non_camel_case_types)]
                    struct TruncateLogSvc<T: BrokerReplicationService>(pub Arc<T>);
                    impl<
                        T: BrokerReplicationService,
                    > tonic::server::UnaryService<super::TruncateLogRequest>
                    for TruncateLogSvc<T> {
                        type Response = super::TruncateLogResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TruncateLogRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BrokerReplicationService>::truncate_log(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = TruncateLogSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: BrokerReplicationService> Clone for BrokerReplicationServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: BrokerReplicationService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: BrokerReplicationService> tonic::server::NamedService
    for BrokerReplicationServiceServer<T> {
        const NAME: &'static str = "rustmq.broker.BrokerReplicationService";
    }
}
