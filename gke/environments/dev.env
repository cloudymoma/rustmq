# RustMQ GKE Deployment - Development Environment
# Phase 2: Configuration Management (October 2025)
#
# Development environment optimized for:
# - Fast iteration and testing
# - Low cost (minimal resources)
# - Quick startup times
# - Auto-shutdown to save costs
#
# Inherits from: common.env
# Override priority: dev.env > common.env

# ============================================================
# GCP Infrastructure - Development
# ============================================================

# GCP Project (SET THIS!)
GCP_PROJECT_ID="rustmq-dev"

# Use single zone for dev
GCP_REGION="us-central1"
GCP_ZONE="us-central1-a"

# ============================================================
# GKE Cluster - Development
# ============================================================

CLUSTER_NAME="rustmq-dev"

# Smaller machine types for cost savings
DEFAULT_NODE_MACHINE_TYPE="e2-medium"  # 2 vCPU, 4GB RAM
DEFAULT_NODE_DISK_SIZE="50"  # 50GB (smaller than prod)

# Minimal node pool for dev
MIN_NODES="1"
MAX_NODES="3"

# Disable expensive features in dev
ENABLE_BINARY_AUTHORIZATION="false"
ENABLE_WORKLOAD_IDENTITY="false"  # Simplify dev setup

# ============================================================
# RustMQ Controller - Development
# ============================================================

# Single controller for dev (Raft still works with 1 node)
CONTROLLER_REPLICAS="1"

# Reduced resources for dev
CONTROLLER_CPU_REQUEST="500m"
CONTROLLER_CPU_LIMIT="1000m"
CONTROLLER_MEMORY_REQUEST="1Gi"
CONTROLLER_MEMORY_LIMIT="2Gi"

# Faster Raft timeouts for dev (quicker feedback)
CONTROLLER_RAFT_HEARTBEAT_INTERVAL="500"
CONTROLLER_RAFT_HEARTBEAT_TIMEOUT="1000"
CONTROLLER_RAFT_ELECTION_TIMEOUT="2000"

# ============================================================
# RustMQ Broker - Development
# ============================================================

# Minimal broker scaling
BROKER_MIN_NODES="1"
BROKER_MAX_NODES="3"

# Reduced resources
BROKER_CPU_REQUEST="1000m"
BROKER_CPU_LIMIT="2000m"
BROKER_MEMORY_REQUEST="2Gi"
BROKER_MEMORY_LIMIT="4Gi"

# Smaller WAL for dev
BROKER_WAL_SIZE="10Gi"  # Much smaller than prod
BROKER_ENABLE_LOCAL_SSD="false"  # Use persistent disk in dev
BROKER_WAL_STORAGE_CLASS="standard"  # Cheaper storage

# Lower connection limits
BROKER_MAX_CONNECTIONS="1000"

# ============================================================
# Object Storage - Development
# ============================================================

# Dev GCS bucket
GCS_BUCKET="rustmq-dev-storage"

# Smaller multipart threshold
OBJECT_STORAGE_MULTIPART_THRESHOLD="10485760"  # 10MB

# ============================================================
# Cache - Development
# ============================================================

# Smaller caches for dev
WRITE_CACHE_SIZE_BYTES="268435456"   # 256MB (vs 1GB in prod)
READ_CACHE_SIZE_BYTES="536870912"    # 512MB (vs 2GB in prod)
L2_CACHE_SHARD_COUNT="16"            # Fewer shards for dev

# ============================================================
# Replication - Development
# ============================================================

# Relaxed replication for dev
REPLICATION_MIN_IN_SYNC_REPLICAS="1"
REPLICATION_ACK_TIMEOUT_MS="3000"

# ============================================================
# Security - Development
# ============================================================

# TLS optional in dev for easier debugging
TLS_ENABLED="false"
MTLS_ENABLED="false"

# Simplified secrets in dev
TLS_CERT_SECRET_NAME="rustmq-dev-tls-cert"
TLS_KEY_SECRET_NAME="rustmq-dev-tls-key"
GCS_CREDENTIALS_SECRET_NAME="rustmq-dev-gcs-creds"

# ============================================================
# Monitoring - Development
# ============================================================

# Basic monitoring in dev
ENABLE_MONITORING="true"
ENABLE_PROMETHEUS="true"
ENABLE_GRAFANA="false"  # Skip Grafana in dev to save resources

# Verbose logging for debugging
LOG_LEVEL="debug"
LOG_FORMAT="text"  # Easier to read than JSON

# Skip tracing in dev
ENABLE_TRACING="false"

# ============================================================
# Networking - Development
# ============================================================

# Dev VPC
VPC_NAME="rustmq-dev-vpc"
SUBNET_NAME="rustmq-dev-subnet"

# Internal load balancer for dev
LOAD_BALANCER_TYPE="INTERNAL"

# Relaxed network policies for dev
ENABLE_NETWORK_POLICIES="false"

# ============================================================
# High Availability - Development
# ============================================================

# No HA requirements in dev
ENABLE_PDB="false"
ENABLE_POD_ANTI_AFFINITY="false"
ENABLE_ZONE_ANTI_AFFINITY="false"

# ============================================================
# Scaling - Development
# ============================================================

# Disable HPA in dev (manual scaling for testing)
ENABLE_HPA="false"

# Disable cluster autoscaler in dev
ENABLE_CLUSTER_AUTOSCALER="false"

# ============================================================
# Operations - Development
# ============================================================

# Allow config updates in dev
ALLOW_RUNTIME_CONFIG_UPDATES="true"

# Shorter timeouts for faster iteration
GRACEFUL_SHUTDOWN_TIMEOUT_MS="10000"  # 10s vs 30s in prod
HEALTH_CHECK_TIMEOUT_MS="5000"

# ============================================================
# Cost Optimization - Development
# ============================================================

# ENABLE auto-shutdown in dev (save costs overnight/weekends)
ENABLE_AUTO_SHUTDOWN="true"
AUTO_SHUTDOWN_SCHEDULE="0 19 * * 1-5"  # 7pm weekdays
AUTO_STARTUP_SCHEDULE="0 8 * * 1-5"    # 8am weekdays

# Use preemptible nodes in dev for cost savings
ENABLE_PREEMPTIBLE_NODES="true"
PREEMPTIBLE_NODE_PERCENTAGE="80"  # 80% of nodes can be preemptible

# ============================================================
# Admin - Development
# ============================================================

ADMIN_SERVER_REPLICAS="1"
ADMIN_SERVER_CPU="250m"  # Minimal resources
ADMIN_SERVER_MEMORY="512Mi"

# ============================================================
# Feature Flags - Development
# ============================================================

# Enable experimental features in dev
ENABLE_EXPERIMENTAL_FEATURES="true"

# Enable debug mode
ENABLE_DEBUG_MODE="true"

# ============================================================
# Development-Specific Settings
# ============================================================

# Docker image tag for dev (use latest for rapid iteration)
IMAGE_TAG="dev-latest"

# Build only for AMD64 in dev (faster builds)
BUILD_PLATFORMS="linux/amd64"

# Verbose mode for debugging
VERBOSE="true"

# ============================================================
# Notes for Development
# ============================================================

# This dev environment is optimized for:
# 1. Low cost (~$50-100/month vs $500-1000 for prod)
# 2. Fast iteration (smaller resources = quicker starts)
# 3. Easy debugging (verbose logs, debug mode, no TLS complexity)
# 4. Auto-shutdown (saves costs when not in use)
#
# NOT suitable for:
# - Performance testing (use staging)
# - High availability testing (single controller)
# - Load testing (limited resources)
# - Security testing (TLS disabled)
