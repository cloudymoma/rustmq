# RustMQ GKE Deployment - Staging Environment
# Phase 2: Configuration Management (October 2025)
#
# Staging environment optimized for:
# - Production-like testing
# - Performance validation
# - Integration testing
# - Pre-production validation
#
# Inherits from: common.env
# Override priority: staging.env > common.env

# ============================================================
# GCP Infrastructure - Staging
# ============================================================

# GCP Project (SET THIS!)
GCP_PROJECT_ID="rustmq-staging"

# Multi-zone for HA testing (like prod)
GCP_REGION="us-central1"
GCP_ZONE="us-central1-a"  # Primary zone
GCP_ZONES="us-central1-a,us-central1-b,us-central1-c"  # Multi-zone

# ============================================================
# GKE Cluster - Staging
# ============================================================

CLUSTER_NAME="rustmq-staging"

# Production-like machine types (but smaller)
DEFAULT_NODE_MACHINE_TYPE="n2-standard-4"  # 4 vCPU, 16GB RAM
DEFAULT_NODE_DISK_SIZE="100"  # Same as prod

# Moderate node pool
MIN_NODES="2"
MAX_NODES="15"  # Less than prod (50) but enough for testing

# Enable important features for testing
ENABLE_BINARY_AUTHORIZATION="true"  # Test like prod
ENABLE_WORKLOAD_IDENTITY="true"     # Test like prod

# ============================================================
# RustMQ Controller - Staging
# ============================================================

# 3 controllers for Raft quorum testing (like prod, but not 5)
CONTROLLER_REPLICAS="3"

# Production-like resources (slightly smaller)
CONTROLLER_CPU_REQUEST="1500m"
CONTROLLER_CPU_LIMIT="3000m"
CONTROLLER_MEMORY_REQUEST="3Gi"
CONTROLLER_MEMORY_LIMIT="6Gi"

# Production Raft timeouts (test real behavior)
CONTROLLER_RAFT_HEARTBEAT_INTERVAL="1000"
CONTROLLER_RAFT_HEARTBEAT_TIMEOUT="2000"
CONTROLLER_RAFT_ELECTION_TIMEOUT="5000"

# ============================================================
# RustMQ Broker - Staging
# ============================================================

# Moderate broker scaling (less than prod)
BROKER_MIN_NODES="2"
BROKER_MAX_NODES="10"  # vs 50 in prod

# Production-like resources
BROKER_CPU_REQUEST="3000m"
BROKER_CPU_LIMIT="6000m"
BROKER_MEMORY_REQUEST="6Gi"
BROKER_MEMORY_LIMIT="12Gi"

# Production-like WAL
BROKER_WAL_SIZE="50Gi"  # Half of prod
BROKER_ENABLE_LOCAL_SSD="true"  # Test like prod
BROKER_WAL_STORAGE_CLASS="fast-ssd"

# Production connection limits
BROKER_MAX_CONNECTIONS="5000"  # Half of prod

# ============================================================
# Object Storage - Staging
# ============================================================

# Staging GCS bucket
GCS_BUCKET="rustmq-staging-storage"

# Production settings
OBJECT_STORAGE_MULTIPART_THRESHOLD="104857600"  # 100MB like prod

# ============================================================
# Cache - Staging
# ============================================================

# Production-like caches
WRITE_CACHE_SIZE_BYTES="536870912"    # 512MB (vs 1GB in prod)
READ_CACHE_SIZE_BYTES="1073741824"    # 1GB (vs 2GB in prod)
L2_CACHE_SHARD_COUNT="32"             # Moderate sharding

# ============================================================
# Replication - Staging
# ============================================================

# Production replication settings
REPLICATION_MIN_IN_SYNC_REPLICAS="2"
REPLICATION_ACK_TIMEOUT_MS="5000"

# ============================================================
# Security - Staging
# ============================================================

# FULL security like prod for testing
TLS_ENABLED="true"
MTLS_ENABLED="true"

# Staging secrets
TLS_CERT_SECRET_NAME="rustmq-staging-tls-cert"
TLS_KEY_SECRET_NAME="rustmq-staging-tls-key"
TLS_CA_SECRET_NAME="rustmq-staging-ca-cert"
GCS_CREDENTIALS_SECRET_NAME="rustmq-staging-gcs-creds"

# ============================================================
# Monitoring - Staging
# ============================================================

# Full monitoring stack for testing
ENABLE_MONITORING="true"
ENABLE_PROMETHEUS="true"
ENABLE_GRAFANA="true"

# Production logging (JSON for structured logs)
LOG_LEVEL="info"  # Production level
LOG_FORMAT="json"

# Enable tracing in staging
ENABLE_TRACING="true"

# ============================================================
# Networking - Staging
# ============================================================

# Staging VPC
VPC_NAME="rustmq-staging-vpc"
SUBNET_NAME="rustmq-staging-subnet"

# Test with load balancer
LOAD_BALANCER_TYPE="INTERNAL"  # Can test EXTERNAL if needed

# Enable network policies (test like prod)
ENABLE_NETWORK_POLICIES="true"

# ============================================================
# High Availability - Staging
# ============================================================

# Enable HA features for testing
ENABLE_PDB="true"
CONTROLLER_MIN_AVAILABLE="2"  # For 3 replicas
BROKER_MIN_AVAILABLE="1"

# Enable anti-affinity (test like prod)
ENABLE_POD_ANTI_AFFINITY="true"
ENABLE_ZONE_ANTI_AFFINITY="true"

# ============================================================
# Scaling - Staging
# ============================================================

# Enable HPA for testing
ENABLE_HPA="true"
BROKER_HPA_TARGET_CPU="70"
BROKER_HPA_TARGET_MEMORY="80"

# Enable cluster autoscaler
ENABLE_CLUSTER_AUTOSCALER="true"

# ============================================================
# Operations - Staging
# ============================================================

# Allow config updates for testing
ALLOW_RUNTIME_CONFIG_UPDATES="true"

# Production-like timeouts
GRACEFUL_SHUTDOWN_TIMEOUT_MS="30000"
HEALTH_CHECK_TIMEOUT_MS="10000"

# ============================================================
# Cost Optimization - Staging
# ============================================================

# Optional auto-shutdown in staging (uncomment to enable)
ENABLE_AUTO_SHUTDOWN="false"  # Keep running for testing
# AUTO_SHUTDOWN_SCHEDULE="0 22 * * 1-5"  # Optional: 10pm weekdays
# AUTO_STARTUP_SCHEDULE="0 6 * * 1-5"    # Optional: 6am weekdays

# Optionally use some preemptible nodes (test resilience)
ENABLE_PREEMPTIBLE_NODES="true"
PREEMPTIBLE_NODE_PERCENTAGE="30"  # 30% preemptible for cost savings

# ============================================================
# Admin - Staging
# ============================================================

ADMIN_SERVER_REPLICAS="1"
ADMIN_SERVER_CPU="500m"
ADMIN_SERVER_MEMORY="1Gi"

# ============================================================
# Feature Flags - Staging
# ============================================================

# Test experimental features in staging before prod
ENABLE_EXPERIMENTAL_FEATURES="true"

# Disable debug mode (use production settings)
ENABLE_DEBUG_MODE="false"

# ============================================================
# Staging-Specific Settings
# ============================================================

# Docker image tag (use semver tags in staging)
IMAGE_TAG="v1.0.0-rc1"  # Release candidate

# Multi-platform like prod
BUILD_PLATFORMS="linux/amd64,linux/arm64"

# Moderate verbosity
VERBOSE="false"

# ============================================================
# Notes for Staging
# ============================================================

# This staging environment is optimized for:
# 1. Production-like testing (~70% of prod resources)
# 2. Performance validation (can handle realistic load)
# 3. Integration testing (full security, monitoring, HA)
# 4. Pre-production validation (test before prod deploy)
# 5. Cost-effective (~$200-400/month vs $500-1000 for prod)
#
# Use staging for:
# - Load testing (realistic performance)
# - Failover testing (multi-zone, HA)
# - Security testing (full mTLS, network policies)
# - Integration testing (full stack)
# - Pre-production validation (final check before prod)
#
# Differences from production:
# - Fewer controller replicas (3 vs 5)
# - Smaller broker scaling (10 vs 50 max)
# - Less resources per pod (50-70% of prod)
# - 30% preemptible nodes (prod has 0%)
