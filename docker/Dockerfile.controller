# Multi-stage build for RustMQ Controller
# Build stage
FROM rust:1.82-slim-bookworm AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /usr/src/rustmq

# Copy dependency files first for better layer caching
COPY Cargo.toml Cargo.lock ./

# Create a dummy src/main.rs to build dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Build dependencies (this layer will be cached unless Cargo.toml changes)
RUN cargo build --release --bin rustmq-controller
RUN rm src/main.rs

# Copy the actual source code
COPY src/ ./src/
COPY .cargo/ ./.cargo/

# Build the controller binary with optimizations
RUN cargo build --release --bin rustmq-controller

# Verify the binary was built
RUN ls -la target/release/ && \
    file target/release/rustmq-controller && \
    ldd target/release/rustmq-controller

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Create rustmq user and group
RUN groupadd -r rustmq && useradd -r -g rustmq rustmq

# Create necessary directories
RUN mkdir -p /var/lib/rustmq/raft \
    /var/lib/rustmq/data \
    /etc/rustmq \
    /var/log/rustmq

# Set ownership
RUN chown -R rustmq:rustmq /var/lib/rustmq /var/log/rustmq

# Copy the binary from builder stage
COPY --from=builder /usr/src/rustmq/target/release/rustmq-controller /usr/local/bin/rustmq-controller

# Make binary executable
RUN chmod +x /usr/local/bin/rustmq-controller

# Copy configuration template (if it exists)
COPY config/controller.toml /etc/rustmq/controller.toml.template

# Create default configuration
RUN cat > /etc/rustmq/controller.toml << 'EOF'
[controller]
node_id = "${CONTROLLER_NODE_ID:-controller-1}"
raft_listen = "${CONTROLLER_LISTEN_RAFT:-0.0.0.0:9095}"
rpc_listen = "${CONTROLLER_LISTEN_RPC:-0.0.0.0:9094}"
http_listen = "${CONTROLLER_LISTEN_HTTP:-0.0.0.0:9642}"

[raft]
peers = []
data_dir = "/var/lib/rustmq/raft"
snapshot_interval = 10000
log_compaction_threshold = 1000

[metastore]
type = "memory"
# No external metastore - using internal Raft consensus
timeout_ms = 5000
retry_attempts = 3

[autobalancer]
enabled = true
cpu_threshold = 0.80
memory_threshold = 0.75
cooldown_seconds = 300
check_interval_seconds = 60

[security]
enable_tls = false
cert_file = ""
key_file = ""
ca_file = ""

[logging]
level = "${RUSTMQ_LOG_LEVEL:-info}"
format = "json"
output = "stdout"
EOF

# Create entrypoint script
RUN cat > /usr/local/bin/entrypoint.sh << 'EOF'
#!/bin/bash
set -e

# Function to substitute environment variables in config file
substitute_env_vars() {
    local file=$1
    # Use envsubst to replace environment variables in the config file
    envsubst < "$file" > "$file.tmp" && mv "$file.tmp" "$file"
}

# Parse RAFT_PEERS environment variable and update config
if [[ -n "$RAFT_PEERS" ]]; then
    # Convert comma-separated peer list to TOML array format
    IFS=',' read -ra PEERS <<< "$RAFT_PEERS"
    PEER_ARRAY="["
    for i in "${!PEERS[@]}"; do
        if [[ $i -gt 0 ]]; then
            PEER_ARRAY+=","
        fi
        PEER_ARRAY+="\"${PEERS[$i]}\""
    done
    PEER_ARRAY+="]"
    
    # Update the config file with the peer array
    sed -i "s/peers = \[\]/peers = $PEER_ARRAY/" /etc/rustmq/controller.toml
fi

# Substitute environment variables in configuration
if [[ -f /etc/rustmq/controller.toml ]]; then
    substitute_env_vars /etc/rustmq/controller.toml
fi

# Ensure raft directory exists and has correct permissions
mkdir -p /var/lib/rustmq/raft
chown -R rustmq:rustmq /var/lib/rustmq/raft

# Controllers use internal Raft consensus - no external dependencies required
echo "Starting controller with internal Raft consensus..."

# Switch to rustmq user and execute the controller
exec gosu rustmq "$@"
EOF

# Install gosu for proper user switching
RUN curl -o /usr/local/bin/gosu -SL "https://github.com/tianon/gosu/releases/download/1.14/gosu-$(dpkg --print-architecture)" \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true

# Install envsubst for config template processing
RUN apt-get update && apt-get install -y gettext-base && rm -rf /var/lib/apt/lists/*

# Make entrypoint executable
RUN chmod +x /usr/local/bin/entrypoint.sh

# Expose ports
EXPOSE 9094 9095 9642

# Set working directory
WORKDIR /var/lib/rustmq

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:9642/health || exit 1

# Use entrypoint script
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Default command
CMD ["rustmq-controller", "--config", "/etc/rustmq/controller.toml"]

# Metadata labels
LABEL maintainer="RustMQ Team <team@rustmq.dev>"
LABEL version="0.1.0"
LABEL description="RustMQ Controller - Cloud-native distributed message queue controller"
LABEL org.opencontainers.image.source="https://github.com/rustmq/rustmq"
LABEL org.opencontainers.image.documentation="https://docs.rustmq.dev"
LABEL org.opencontainers.image.vendor="RustMQ"
LABEL org.opencontainers.image.title="RustMQ Controller"