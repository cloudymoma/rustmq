# Optimized Multi-stage build for RustMQ BigQuery Subscriber with cargo-chef
# Phase 1: Docker Build Optimization (October 2025)
#
# Key Improvements:
# - cargo-chef for optimal dependency caching (50-70% faster builds)
# - Distroless runtime images (60-80% smaller, improved security)
# - Multi-platform support (AMD64 and ARM64)

# ============================================================
# Stage 1: Chef - Install cargo-chef
# ============================================================
FROM rust:1.82-slim-bookworm AS chef

# Install cargo-chef for dependency caching
RUN cargo install cargo-chef --locked

WORKDIR /usr/src/rustmq

# ============================================================
# Stage 2: Planner - Analyze dependencies
# ============================================================
FROM chef AS planner

# Copy all source files to analyze dependencies
COPY Cargo.toml Cargo.lock ./
COPY src/ ./src/
COPY .cargo/ ./.cargo/

# Generate recipe.json with all dependencies
RUN cargo chef prepare --recipe-path recipe.json

# ============================================================
# Stage 3: Builder - Build dependencies and application
# ============================================================
FROM chef AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy recipe.json from planner
COPY --from=planner /usr/src/rustmq/recipe.json recipe.json

# Build dependencies only - this layer is cached until dependencies change
RUN cargo chef cook --release --recipe-path recipe.json

# Copy source code (this invalidates cache only when source changes)
COPY Cargo.toml Cargo.lock ./
COPY src/ ./src/
COPY .cargo/ ./.cargo/

# Build the BigQuery subscriber binary with optimizations
RUN cargo build --release --bin rustmq-bigquery-subscriber

# Verify the binary was built
RUN ls -la target/release/ && \
    file target/release/rustmq-bigquery-subscriber && \
    ldd target/release/rustmq-bigquery-subscriber

# ============================================================
# Stage 4: Runtime - Distroless for minimal attack surface
# ============================================================
FROM gcr.io/distroless/cc-debian12:latest AS runtime

# Copy CA certificates for HTTPS
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Use nonroot user from distroless (UID 65532)
USER nonroot:nonroot

# Copy binary with correct ownership
COPY --from=builder --chown=nonroot:nonroot /usr/src/rustmq/target/release/rustmq-bigquery-subscriber /usr/local/bin/rustmq-bigquery-subscriber

# Copy configuration template (will be mounted via ConfigMap in K8s)
COPY --chown=nonroot:nonroot config/bigquery-subscriber.toml /etc/rustmq/bigquery-subscriber.toml

# Set working directory
WORKDIR /var/lib/rustmq

# Expose health check port (if applicable)
EXPOSE 9643

# Health checks will be handled by Kubernetes liveness/readiness probes
HEALTHCHECK NONE

# Default command
ENTRYPOINT ["/usr/local/bin/rustmq-bigquery-subscriber"]
CMD ["--config", "/etc/rustmq/bigquery-subscriber.toml"]

# Metadata labels
LABEL maintainer="RustMQ Team <team@rustmq.dev>"
LABEL version="0.2.0"
LABEL description="RustMQ BigQuery Subscriber - Stream RustMQ messages to Google BigQuery (Optimized)"
LABEL org.opencontainers.image.source="https://github.com/rustmq/rustmq"
LABEL org.opencontainers.image.documentation="https://docs.rustmq.dev"
LABEL org.opencontainers.image.vendor="RustMQ"
LABEL org.opencontainers.image.title="RustMQ BigQuery Subscriber"
LABEL build.optimization="cargo-chef+distroless"
LABEL build.phase="phase-1-docker-optimization"
